#summary Overview the how to generate column header and fill data of table-based sections

<wiki:toc max_depth="2" />

----

= Introduction =

There are two modes of reporting of ‘Identification’ and ‘Quantification’ type results in mzTab files which MUST be specified by the mandatory meta value ‘mzTab-mode’ (‘Summary’ and ‘Complete’). The ‘Summary’ mode is used if final results are provided (e.g. quantification data at the level of study variables). The ‘Complete’ mode is used if all quantification data is provided (e.g. quantification on the assay level and on the study variable level).

The MANDATORY fields in the Metadata Section ‘mzTab-mode’ and ‘mzTab-type’ MUST therefore be present to indicate which type of file it is. In Table 2, the columns that MUST be included in a ‘Summary’ file are indicated and in Table 3 the columns that MUST be included in addition in a ‘Complete’ file. It must be highlighted that all the columns in Tables 2 and 3 MUST be present in a “Complete” file. 

In general, “null” values SHOULD not be given within any column of a “Complete” file if the information is available.

|| *Protein Section* || *Identification* || *Quantification* ||
|| || accession || accession ||
|| || description || description ||
|| || taxid || taxid ||
|| || species, || species ||
|| || database || database  ||
|| || database_version  || database_version ||
|| || search_engine || search_engine ||
|| || best_search_engine_score || best_search_engine_score ||
|| || ambiguity_members || ambiguity_members ||
|| || modifications || modifications ||
|| || protein_coverage || protein_coverage ||
|| ||  || protein_abundance_study_variable[1-n] ||
|| ||  || protein_abundance_stdev_study_variable[1-n]  ||
|| ||  || protein_abundance_std_error_study_variable[1-n] ||
|| || || || 
|| *Peptide Section* || *Identification* || *Quantification* ||
|| ||  || sequence ||
|| ||  || accession  ||
|| ||  || unique  ||
|| ||  || database  ||
|| ||  || database_version  ||
|| ||  || search_engine ||
|| ||  || best_search_engine_score ||
|| ||  || modifications ||
|| ||  || retention_time ||
|| ||  || retention_time_window ||
|| ||  || charge ||
|| ||  || mass_to_charge ||
|| ||  || peptide_abundance_study_variable[1-n]  ||
|| ||  || peptide_abundance_stdev_study_variable[1-n] ||
|| ||  || peptide_abundance_std_error_study_variable[1-n] ||
|| || || || 
|| *PSM Section* || *Identification* || *Quantification* ||
|| || sequence || sequence ||
|| || PSM_ID || PSM_ID ||
|| || accession || accession ||
|| || unique || unique ||
|| || database || database ||
|| || database_version || database_version ||
|| || search_engine || search_engine ||
|| || search_engine_score || search_engine_score ||
|| || modifications || modifications ||
|| || spectra_ref || spectra_ref ||
|| || retention_time || retention_time ||
|| || charge || charge ||
|| || exp_mass_to_charge || exp_mass_to_charge ||
|| || calc_mass_to_charge || calc_mass_to_charge ||
|| || pre || pre ||
|| || post || post ||
|| || start || start ||
|| || end || end ||
|| || || || 
|| *Small Molecule Section* || *Identification* || *Quantification* ||
|| || identifier || identifier ||
|| || chemical_formula || chemical_formula ||
|| || smiles || smiles ||
|| || inchi_key || inchi_key ||
|| || description || description ||
|| || exp_mass_to_charge || exp_mass_to_charge ||
|| || calc_mass_to_charge || calc_mass_to_charge ||
|| || charge || charge ||
|| || retention time || retention time ||
|| || taxid || taxid ||
|| || species || species ||
|| || database || database ||
|| || database_version || database_version ||
|| || spectra_ref || spectra_ref ||
|| || search_engine || search_engine ||
|| || best_search_engine_score || best_search_engine_score ||
|| || modifications || modifications ||
|| ||  || smallmolecule_abundance_assay[1-n] (if assays are reported) ||
|| ||  || smallmolecule_abundance_study_variable[1-n]  (if study variables are reported) ||
|| ||  || smallmolecule_stdev_study_variable[1-n] (if study variables are reported) ||
|| ||  || smallmolecule_std_error_study_variable[1-n] (if study variables are reported) ||

*Table 2*. Mandatory columns in mzTab 'Summary' files. Where noted, these columns are mandatory for every study_variable[1-n] or every ms_run[1-n] reported in the file. Note – any Quantification file type MAY include any of the Columns or Sections required for an Identification file type.


|| *Protein Section* || *Identification* || *Quantification* ||
|| || search_engine_score_ms_run[1-n] || search_engine_score_ms_run[1-n] ||
|| || num_psms_ms_run[1-n] || protein_abundance_assay[1-n] ||
|| || || num_peptides_distinct_ms_run[1-n] ||
|| || || num_peptide_unique_ms_run[1-n] ||
|| || || || 
|| *Peptide Section* || *Identification* || *Quantification* ||
|| ||  || search_engine_score_ms_run[1-n] ||
|| ||  || peptide_abundance_assay[1-n] ||
|| ||  || spectra_ref (if MS2 based quantification employed) ||
|| || || || 
|| *Small Molecule Section* || *Identification* || *Quantification* ||
|| ||  || search_engine_score_ms_run[1-n] ||

*Table 3*. Mandatory columns in mzTab 'Complete' files. In addition, 'Complete' files MUST also have all the items that are MANDATORY in a 'Summary' file (Table 2 above). Where noted, these columns are mandatory for every assay[1-n], ms_run[1-n] or study_variable[1-n] reported in the file.


|| *Protein Section* || *Identification* || *Quantification* ||
|| || opt_global_* || opt_global_* ||
|| || go_terms || go_terms ||
|| || reliability  || reliability ||
|| || uri || num_psms_ms_run[1-n] ||
|| ||  || num_peptides_distinct_ms_run[1-n] ||
|| ||  || num_peptide_unique_ms_run[1-n] ||
|| ||  || uri ||
|| || || || 
|| *Peptide Section* || *Identification* || *Quantification* ||
|| ||  || opt_global_* ||
|| ||  || reliability  ||
|| ||  || uri ||
|| || || || 
|| *PSM Section* || *Identification* || *Quantification* ||
|| ||  || opt_global_* ||
|| ||  || reliability  ||
|| ||  || uri ||
|| || || || 
|| *Small Molecule Section* || *Identification* || *Quantification* ||
|| ||  || opt_global_* ||
|| ||  || reliability  ||
|| ||  || uri ||

*Table 4*. Optional fields in mzTab 'Complete' and 'Summary' files. 


----

= Column Header =

In jmzTab API, we use MZTabColumnFactory to generate column header line. Currently, there are four types of MZTabColumn. Stable columns defined in the factory directly, which have stable logical position in the table section. Besides, we also provide ms_run optional columns, abundance optional columns, and user defined optional columns. 

== Generate Protein Column Header ==
{{{
        MsRun msRun1 = new MsRun(1);
        MsRun msRun2 = new MsRun(2);
        Assay assay1 = new Assay(1);
        Assay assay2 = new Assay(2);
        StudyVariable studyVariable1 = new StudyVariable(1);

        // create stable columns.
        MZTabColumnFactory factory = MZTabColumnFactory.getInstance(Section.Protein_Header);

        // add optional columns which have stable order.
        factory.addGoTermsOptionalColumn();
        factory.addReliabilityOptionalColumn();
        factory.addURIOptionalColumn();

        // add ms_run optional columns
        factory.addOptionalColumn(ProteinColumn.SEARCH_ENGINE_SCORE, msRun1);
        factory.addOptionalColumn(ProteinColumn.NUM_PSMS, msRun1);
        factory.addOptionalColumn(ProteinColumn.NUM_PEPTIDES_DISTINCT, msRun1);
        factory.addOptionalColumn(ProteinColumn.NUM_PEPTIDES_UNIQUE, msRun1);
        factory.addOptionalColumn(ProteinColumn.NUM_PSMS, msRun2);
        factory.addOptionalColumn(ProteinColumn.NUM_PEPTIDES_DISTINCT, msRun2);

        // add abundance columns which locate the end of table.
        factory.addAbundanceOptionalColumn(assay1);
        factory.addAbundanceOptionalColumn(studyVariable1);
        factory.addAbundanceOptionalColumn(assay2);

        // add user defined optional columns
        factory.addOptionalColumn(msRun1, "my_value", String.class);
        CVParam param = new CVParam("MS", "MS:1002217", "decoy peptide", null);
        factory.addOptionalColumn(param, String.class);
}}}

== Generate Peptide Column Header ==
{{{
        MsRun msRun1 = new MsRun(1);
        Assay assay1 = new Assay(1);
        Assay assay2 = new Assay(2);
        StudyVariable studyVariable1 = new StudyVariable(1);

        // create stable columns.
        MZTabColumnFactory factory = MZTabColumnFactory.getInstance(Section.Peptide_Header);

        // add optional columns which have stable order.
        factory.addReliabilityOptionalColumn();
        factory.addURIOptionalColumn();
        factory.addOptionalColumn(PeptideColumn.SEARCH_ENGINE_SCORE, msRun1);

        // add abundance columns which locate the end of table.
        factory.addAbundanceOptionalColumn(assay1);
        factory.addAbundanceOptionalColumn(studyVariable1);
        factory.addAbundanceOptionalColumn(assay2);

        // add user defined optional columns
        factory.addOptionalColumn(msRun1, "my_value", String.class);
        CVParam param = new CVParam("MS", "MS:1002217", "decoy peptide", null);
        factory.addOptionalColumn(param, String.class);
}}}

== Generate PSM Column Header ==
{{{
        Assay assay1 = new Assay(1);

        // create stable columns.
        MZTabColumnFactory factory = MZTabColumnFactory.getInstance(Section.PSM_Header);

        // add optional columns which have stable order.
        factory.addReliabilityOptionalColumn();
        factory.addURIOptionalColumn();

        // add user defined optional columns
        factory.addOptionalColumn(assay1, "my_value", String.class);
        CVParam param = new CVParam("MS", "MS:1002217", "decoy peptide", null);
        factory.addOptionalColumn(param, String.class);
}}}

== Generate Small Molecule Column Header ==
{{{
        MsRun msRun1 = new MsRun(1);
        Assay assay1 = new Assay(1);
        Assay assay2 = new Assay(2);
        StudyVariable studyVariable1 = new StudyVariable(1);

        // create stable columns.
        MZTabColumnFactory factory = MZTabColumnFactory.getInstance(Section.Small_Molecule);

        // add optional columns which have stable order.
        factory.addReliabilityOptionalColumn();
        factory.addURIOptionalColumn();

        // add optional columns which have stable order.
        factory.addOptionalColumn(SmallMoleculeColumn.SEARCH_ENGINE_SCORE, msRun1);

        // add abundance columns which locate the end of table.
        factory.addAbundanceOptionalColumn(assay1);
        factory.addAbundanceOptionalColumn(studyVariable1);
        factory.addAbundanceOptionalColumn(assay2);

        // add user defined optional columns
        factory.addOptionalColumn(msRun1, "my_value", String.class);
        CVParam param = new CVParam("MS", "MS:1002217", "decoy peptide", null);
        factory.addOptionalColumn(param, String.class);
}}}

== Find Column by Header Name ==

There are two ways to get MZTabColumn. 

{{{
        MZTabColumn column = factory.findColumnByHeader("retention_time");
        MZTabColumn column = factory.findColumnByHeader(ProteinColumn.ACCESSION.getHeader());
        MZTabColumn column = factory.findColumnByPosition("1");
        MZTabColumn column = factory.findColumnByPosition(ProteinColumn.ACCESSION.getOrder());
}}}

----

= Fill Data =

== Fill Protein Data ==
{{{
        // Create Protein Columns
        MsRun msRun1 = new MsRun(1);
        MsRun msRun2 = new MsRun(2);
        Assay assay1 = new Assay(1);
        Assay assay2 = new Assay(2);
        StudyVariable studyVariable1 = new StudyVariable(1);

        MZTabColumnFactory factory = MZTabColumnFactory.getInstance(Section.Protein_Header);
        factory.addOptionalColumn(ProteinColumn.SEARCH_ENGINE_SCORE, msRun1);
        factory.addOptionalColumn(ProteinColumn.NUM_PSMS, msRun1);
        factory.addOptionalColumn(ProteinColumn.NUM_PEPTIDES_DISTINCT, msRun1);
        factory.addOptionalColumn(ProteinColumn.NUM_PEPTIDES_UNIQUE, msRun1);
        factory.addOptionalColumn(ProteinColumn.NUM_PSMS, msRun2);
        factory.addOptionalColumn(ProteinColumn.NUM_PEPTIDES_DISTINCT, msRun2);

        factory.addAbundanceOptionalColumn(assay1);
        factory.addAbundanceOptionalColumn(studyVariable1);
        factory.addAbundanceOptionalColumn(assay2);

        factory.addOptionalColumn(assay1, "my_value", String.class);
        CVParam param = new CVParam("MS", "MS:1002217", "decoy peptide", null);
        factory.addOptionalColumn(param, String.class);

        
        // Fill Data
        Protein protein = new Protein(factory);

        // set stable columns data.
        protein.setAccession("P12345");
        protein.setDescription("Aspartate aminotransferase, mitochondrial");
        protein.setTaxid("10116");
        protein.setSpecies("Rattus norvegicus (Rat)");
        protein.setDatabase("UniProtKB");
        protein.setDatabaseVersion("2011_11");
        protein.setSearchEngine("[MS,MS:1001207,Mascot,]");
        protein.addSearchEngineParam("[MS,MS:1001208,Sequest,]");
        protein.setBestSearchEngineScore("[MS,MS:1001171,Mascot score,50]|[MS,MS:1001155,Sequest:xcorr,2]");
        protein.setReliability(Reliability.High);
        protein.setAmbiguityMembers("P12347,P12348");
        protein.setModifications("3|4|8-MOD:00412, 3|4|8-MOD:00412");
        protein.setURI("http://www.ebi.ac.uk/pride/url/to/P12345");
        protein.setGOTerms("GO:0006457|GO:0005759|GO:0005886|GO:0004069");
        protein.setProteinConverage("0.4");
        System.out.println(protein);

        // set optional columns which have stable order.
        protein.setSearchEngineScore(msRun1, "[MS,MS:1001171,Mascot score,50]|[MS,MS:1001155,Sequest:xcorr,2]");
        protein.setNumPSMs(msRun1, 4);
        protein.setNumPSMs(msRun2, 2);
        protein.setNumPeptidesDistinct(msRun1, 3);
        protein.setNumPeptidesUnique(msRun1, 2);
        System.out.println(protein);

        // set abundance columns
        protein.setAbundanceColumn(assay1, "0.4");
        protein.setAbundanceColumn(assay2, "0.2");

        protein.setAbundanceColumn(studyVariable1, "0.4");
        protein.setAbundanceStdevColumn(studyVariable1, "0.3");
        protein.setAbundanceStdErrorColumn(studyVariable1, "0.2");
        System.out.println(protein);

        // set user defined optional columns
        protein.setOptionColumn(assay1, "my_value", "My value about assay[1]");
        protein.setOptionColumn(param, "TOM value");
}}}


== Fill Peptide Data ==
{{{
        MsRun msRun1 = new MsRun(1);
        Assay assay1 = new Assay(1);
        Assay assay2 = new Assay(2);
        StudyVariable studyVariable1 = new StudyVariable(1);

        MZTabColumnFactory factory = MZTabColumnFactory.getInstance(Section.Peptide_Header);
        factory.addOptionalColumn(PeptideColumn.SEARCH_ENGINE_SCORE, msRun1);
        factory.addAbundanceOptionalColumn(assay1);
        factory.addAbundanceOptionalColumn(studyVariable1);
        factory.addAbundanceOptionalColumn(assay2);
        factory.addOptionalColumn(msRun1, "my_value", String.class);
        CVParam param = new CVParam("MS", "MS:1002217", "decoy peptide", null);
        factory.addOptionalColumn(param, String.class);

        Metadata metadata = new Metadata();
        metadata.addMsRunLocation(2, new URL("file://C:\\path\\to\\my\\file"));

        System.out.println(factory);
        Peptide peptide = new Peptide(factory, metadata);

        peptide.setSequence("KVPQVSTPTLVEVSR");
        peptide.setAccession("P02768");
        peptide.setUnique("0");
        peptide.setDatabase("UniProtKB");
        peptide.setDatabaseVersion("2011_11");
        peptide.setSearchEngine("[MS,MS:1001207,Mascot,]|[MS,MS:1001208,Sequest,]");
        peptide.setBestSearchEngineScore("[MS,MS:1001155,Sequest:xcorr,2]");
        peptide.setReliability("3");
        peptide.setModifications("3[MS,MS:1001876, modification probability, 0.8]|4[MS,MS:1001876, modification probability, 0.2]-MOD:00412,8[MS,MS:1001876, modification probability, 0.3]-MOD:00412");
        peptide.setRetentionTime("10.2");
        peptide.setRetentionTimeWindow("1123.2");
        peptide.addRetentionTimeWindow(1145.3);
        peptide.setCharge("2");
        peptide.setMassToCharge("1234.4");
        peptide.setURI("http://www.ebi.ac.uk/pride/link/to/peptide");
        peptide.setSpectraRef("ms_run[2]:index=7|ms_run[2]:index=9");
}}}


== Fill PSM Data ==
{{{
        Assay assay1 = new Assay(1);

        MZTabColumnFactory factory = MZTabColumnFactory.getInstance(Section.PSM_Header);
        factory.addOptionalColumn(assay1, "my_value", String.class);
        CVParam param = new CVParam("MS", "MS:1002217", "decoy peptide", null);
        factory.addOptionalColumn(param, String.class);

        Metadata metadata = new Metadata();
        metadata.addMsRunLocation(2, new URL("file://C:\\path\\to\\my\\file"));

        // fill psm data
        PSM psm = new PSM(factory, metadata);

        psm.setSequence("KVPQVSTPTLVEVSR");
        psm.setPSM_ID("1");
        psm.setAccession("P02768");
        psm.setUnique(MZBoolean.False);
        psm.setDatabase("UniProtKB");
        psm.setDatabaseVersion("2011_11");
        psm.setSearchEngine("[MS,MS:1001207,Mascot,]|[MS,MS:1001208,Sequest,]");
        psm.setSearchEngineScore("[MS,MS:1001155,Sequest:xcorr,2]");
        psm.setReliability("3");
        psm.setModifications("CHEMMOD:+159.93");
        psm.setRetentionTime("10.2");
        psm.setCharge("2");
        psm.setExpMassToCharge("1234.4");
        psm.setCalcMassToCharge("123.4");
        psm.setURI("http://www.ebi.ac.uk/pride/link/to/peptide");
        psm.setSpectraRef("ms_run[2]:index=7|ms_run[2]:index=9");
        psm.setPre("K");
        psm.setPost("D");
        psm.setStart("45");
        psm.setEnd("57");
}}}

== Fill Small Molecule Data ==
{{{
        MsRun msRun1 = new MsRun(1);
        Assay assay1 = new Assay(1);
        Assay assay2 = new Assay(2);
        StudyVariable studyVariable1 = new StudyVariable(1);

        MZTabColumnFactory factory = MZTabColumnFactory.getInstance(Section.Small_Molecule);
        factory.addAbundanceOptionalColumn(assay1);
        factory.addAbundanceOptionalColumn(studyVariable1);
        factory.addAbundanceOptionalColumn(assay2);
        factory.addOptionalColumn(msRun1, "my_value", String.class);
        CVParam param = new CVParam("MS", "MS:1002217", "decoy peptide", null);
        factory.addOptionalColumn(param, String.class);

        Metadata metadata = new Metadata();
        metadata.addMsRunLocation(2, new URL("file://C:\\path\\to\\my\\file"));

        // Fill data
        SmallMolecule sm = new SmallMolecule(factory, metadata);
        sm.setIdentifier("CID:00027395");
        sm.setChemicalFormula("C17H20N4O2");
        sm.setSmiles("C1=CC=C(C=C1)CCNC(=O)CCNNC(=O)C2=CC=NC=C2");
        sm.setInchiKey("QXBMEGUKVLFJAM-UHFFFAOYSA-N");
        sm.setDescription("N-(2-phenylethyl)-3-[2-(pyridine-4-carbonyl)hydrazinyl]propanamide");
        sm.setExpMassToCharge("1234.4");
        sm.setCalcMassToCharge("1234.5");
        sm.setCharge("2");
        sm.setRetentionTime("10.2|11.5");
        sm.setTaxid("10116");
        sm.setSpecies("Rattus norvegicus (Rat)");
        sm.setDatabase("UniProtKB");
        sm.setDatabaseVersion("2011_11");
        sm.setReliability("2");
        sm.setURI("http://www.ebi.ac.uk/pride/link/to/identification");
        sm.setSpectraRef("ms_run[2]:index=7|ms_run[2]:index=9");
        sm.setSearchEngine("[MS, MS:1001477, SpectraST,]");
        sm.setBestSearchEngineScore("[MS, MS:1001419, SpectraST:discriminant score F, 0.7]");
        sm.setModifications("CHEMMOD:+Na-H");
}}}

