#summary Overview the how to generate column header and fill data of table-based sections

<wiki:toc max_depth="2" />

----

= Introduction =

Add your content here.

----

= Column Header =

Add your content here.  Format your content with:

----

== Mandatory Column Header ==
  * Generate mandatory columns
Mandatory columns' header of protein/peptide/small molecule section have stable position, column name, data type. As a result, we use a factory class to generate them.
{{{
MZTabColumnFactory factory = MZTabColumnFactory.getInstance(Section.Protein);
MZTabColumnFactory factory = MZTabColumnFactory.getInstance(Section.Peptide);
MZTabColumnFactory factory = MZTabColumnFactory.getInstance(Section.SmallMolecule);
}}}

User can get special column by position, column name. The stable columns' name and position defined in the !ProteinColumn/!PeptideColumn/!SmallMoleculeColumn class.
{{{
MZTabColumn column = factory.getColumn(2);
MZTabColumn column = factory.getColumn("retention_time");
}}}

----

== Option Column Header ==
There are three kind of Option Column Header

  * Create a column factory which only include stable columns
{{{
MZTabColumnFactory factory = MZTabColumnFactory.getInstance(Section.Peptide);
}}}

  * Add three abundance columns: peptide_abundance_sub![1!], peptide_abundance_stdev_sub![1!], peptide_abundance_std_error_sub![1!] for special subsample. *NOTICE:* subUnit should be found in the metadata.
{{{
SubUnit subUnit = new SubUnit("PRIDE_1234", 1);
factory.addAbundanceColumns(subUnit);
}}}
  * Add option columns: opt_my_value, opt_cv_MS:1001208_TOM. *NOTICE:* user defined optional column, the default data type is String.class. If user set other data type, then need put according data in the fill process, otherwise add value operation return false.
{{{
CVParam param = new CVParam("MS", "MS:1001208", "TOM", null);
factory.addOptionalColumn("my_value", String.class);
factory.addCVParamOptionalColumn(param);
}}}

----

= Fill Data =
Create a record row, based on MZTabColumnFactory. *NOTICE: * There exists one-to-one mapping between column header and value. 

----

== Fill data which only include mandatory columns ==
  * Generate a protein data row, only include mandatory columns.
{{{
Protein protein = new Protein();
}}}

  * Fill data for mandatory columns provide a couple of methods to fill data for mandatory columns. For String type of data, user can set directly. 
{{{
protein.setAccession("P12345");
protein.setDescription("Aspartate aminotransferase, mitochondrial");
}}}

  * For non-String type data, we provide two type of methods. 
    # The easiest method is use String type, system will parse and translate this string to other type. *NOTICE*, system *not* report any error if parse error, only return null object. Thus, maybe exists some bugs when calling this method.
{{{
protein.setTaxid("10116");
protein.setSearchEngine("[MS,MS:1001207,Mascot,]|[MS,MS:1001208,Sequest,]");
protein.setModifications("3|4|8-MOD:00412, 3|4|8-MOD:00412");
}}}
    # Fill !SplitList object data.
{{{
SplitList<Param> searchEngine = new SplitList<Param>(MZTabConstants.BAR);
searchEngine.add(new CVParam("MS", "MS:1001207", "Mascot", null));
searchEngine.add(new CVParam("MS", "MS:1001208", "Sequest", null));
protein.setSearchEngine(searchEngine);
}}}
    # Fill Reliability
{{{
protein.setReliability(Reliability.High);
}}}
    # Fill Modification: Modification is most complex expression in mzTab specification.
{{{
# 3-MOD:00412
Modification modification1 = new Modification(Section.Protein, Modification1.Type.MOD, "00412");
modification1.addPosition(3, null);

# 3|4-MOD:00412
modification1.addPosition(4, null);

# CHEMMOD:+159.93
Modification modification2 = new Modification(Section.Protein, Modification2.Type.CHEMMOD, "+159.93");

# 3[MS, MS:100xxxx, Probability Score Y, 0.8]|4[MS, MS:100xxxx, Probability Score Y, 0.2]-MOD:00412|[MS, MS:1001524, fragment neutral loss, 63.998285]
Modification modification3 = new Modification(Section.Protein, Modification.Type.MOD, "00412");
modification3.addPosition(3, new CVParam("MS", "MS:100xxxx", "Probability Score Y", "0.8"));
modification3.addPosition(4, new CVParam("MS", "MS:100xxxx", "Probability Score Y", "0.2"));
modification3.setNeutralLoss(new CVParam("MS", "MS:1001524", "fragment neutral loss", "63.998285"));

# 3-SUBST:R
Modification modification4 = new Modification(Section.Protein, Modification4.Type.SUBST, "R");
modification4.addPosition(3, null);

# CHEMMOD:+159.93,3|4-MOD:00412,3-SUBST:R
ModificationList modList = new ModificationList();
modList.add(modification2);
modList.add(modification1);
modList.add(modification4);
}}}

----

== Fill data which only include user defined optional columns ==
Because of optional columns have dynamic position, column header and data type, thus, system only provide addValue(position, value) method to fill value manually.
{{{
# create factory with optional columns
MZTabColumnFactory factory = MZTabColumnFactory.getInstance(Section.Protein);
SubUnit subUnit = new SubUnit("PRIDE_1234", 1);
factory.addAbundanceColumns(subUnit);
CVParam param = new CVParam("MS", "MS:1001208", "TOM", null);
factory.addOptionalColumn("my_value", String.class);
factory.addCVParamOptionalColumn(param);

# based on column factory, create a protein record.
Protein protein = new Protein(factory);

# fill data for optional columns 
# Notice: the position need calculate by yourself :)
protein.addValue(21, new Double(0.2));

# You can also use factory to navigate optional columns and position:
# Notice: the return map is read only, not allow user to add/remove column.
SortedMap<Integer, OptionColumn> factory.getAbundanceColumnMapping();
SortedMap<Integer, OptionColumn> factory.getOptionalColumnMapping();

# Or get column position by name directly:
Integer factory.containOptionalColumn("peptide_abundance_sub[1]");
Integer factory.containOptionalColumn("peptide_abundance_stdev_sub[1]");
Integer factory.containOptionalColumn("peptide_abundance_std_error_sub[1]");
Integer factory.containOptionalColumn("opt_my_value");
Integer factory.containOptionalColumn("opt_cv_MS:1001208_TOM");
}}}